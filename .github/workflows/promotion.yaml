name: Code promotion pipeline
on:
  workflow_dispatch:
#     inputs:
#       source_branch:
#         type: choice
#         description: 'Branch to promote code FROM'
#         required: true
#         default: 'dev'
#         options:
#           - dev
#           - test
#           - staging
#       target_branch:
#         type: choice
#         description: 'Branch to promote code TO'
#         required: true
#         options:
#           - test
#           - staging
#           - main
#           - master
#       force_merge:
#         type: choice
#         description: 'Ignore branch settings and merge without review'
#         required: true
#         options:
#           - 'true'
#           - 'false'
#         default: 'true'
# env:
#   AWS_REGION : "us-east-1"
permissions:
      id-token: write
      contents: write    # This is required for actions/checkout@v2
      pull-requests: write
      # actions:
      # deployments: write

jobs:
  test:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Echo placeholder secret
        run: |
          echo ${{ env.PLACEHOLDER }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ env.PLACEHOLDER }}:role/managed/GALocalSecurityPipelineAssumedRole
          role-session-name: GASession
          aws-region: ${{ env.AWS_REGION }}
    env:
      PLACEHOLDER: ${{ secrets.PLACEHOLDER }}
      AWS_REGION: "us-east-1"
#   Promote:
#     runs-on: ubuntu-latest
#     # environment: ${{ github.event.inputs.target_branch }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           ref: ${{ github.event.inputs.source_branch }}
#       # - name: Look for existing open PR
#       #   run: |
#       #     pullreqnumber="$(gh pr status --json number,baseRefName,state -q '.currentBranch | select((.baseRefName == "${{ github.event.inputs.target_branch }}") and (.state == "OPEN")) | .number')"
#       #     echo 'PULL_REQ_NUMBER='$pullreqnumber >> $GITHUB_ENV
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       # - name: Create PR
#       #   id: create-pr
#       #   if: env.PULL_REQ_NUMBER == ''
#       #   run: |
#       #     gh pr create --base ${{ github.event.inputs.target_branch }} --head ${{ github.event.inputs.source_branch }} --title 'Promotion Pipeline: ${{ github.event.inputs.source_branch }} to ${{ github.event.inputs.target_branch }}'  --body "Promoting code from ${{ github.event.inputs.source_branch }} to ${{ github.event.inputs.target_branch }}. Pipeline initiated by ${{ github.actor }}"
#       #     sleep 30s
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       # - name: Get PR number
#       #   run: |
#       #     pullreqnumber="$(gh pr status --json number,baseRefName,mergeable,state -q '.currentBranch | select((.baseRefName == "${{ github.event.inputs.target_branch }}") and (.mergeable == "MERGEABLE") and (.state == "OPEN")) | .number')"
#       #     echo 'PULL_REQ_NUMBER='$pullreqnumber >> $GITHUB_ENV
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       # - name: Merge PR with review
#       #   if: github.event.inputs.force_merge == 'false'
#       #   run: |
#       #     gh pr merge $PULL_REQ_NUMBER -m --auto
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       # - name: Merge PR without review
#       #   if: github.event.inputs.force_merge == 'true'
#       #   run: |
#       #     gh pr merge $PULL_REQ_NUMBER -m --admin
#       #   env:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   Deploy:
#       # - name: Promote
#       #   # the uses field does not allow expressions so it must be hardcoded
#     uses: ./.github/workflows/test_and_deploy.yml@$dev

