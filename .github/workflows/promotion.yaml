name: Code promotion pipeline
on:
  workflow_dispatch:
    inputs:
      source_branch:
        type: choice
        description: 'Branch to promote code FROM'
        required: true
        default: 'dev'
        options:
          - dev
          - test
          - staging
      target_branch:
        type: choice
        description: 'Branch to promote code TO'
        required: true
        options:
          - test
          - staging
          - main
          - master
      force_merge:
        type: choice
        description: 'Ignore branch settings and merge without review'
        required: true
        options:
          - 'true'
          - 'false'
        default: 'true'
# env:
#   AWS_REGION : "us-east-1"
permissions:
      id-token: write
      contents: write
      pull-requests: write

jobs:        
  PromoteCode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.source_branch }}
      - name: Look for existing open PR
        run: |
          pullreqnumber="$(gh pr status --json number,baseRefName,state -q '.currentBranch | select((.baseRefName == "${{ github.event.inputs.target_branch }}") and (.state == "OPEN")) | .number')"
          echo 'PULL_REQ_NUMBER='$pullreqnumber >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create PR
        id: create-pr
        if: env.PULL_REQ_NUMBER == ''
        run: |
          gh pr create --base ${{ github.event.inputs.target_branch }} --head ${{ github.event.inputs.source_branch }} --title 'Promotion Pipeline: ${{ github.event.inputs.source_branch }} to ${{ github.event.inputs.target_branch }}'  --body "Promoting code from ${{ github.event.inputs.source_branch }} to ${{ github.event.inputs.target_branch }}. Pipeline initiated by ${{ github.actor }}"
          sleep 30s
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get PR number
        run: |
          pullreqnumber="$(gh pr status --json number,baseRefName,mergeable,state -q '.currentBranch | select((.baseRefName == "${{ github.event.inputs.target_branch }}") and (.mergeable == "MERGEABLE") and (.state == "OPEN")) | .number')"
          echo 'PULL_REQ_NUMBER='$pullreqnumber >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Merge PR with review
        if: github.event.inputs.force_merge == 'false'
        run: |
          gh pr merge $PULL_REQ_NUMBER -m --auto
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Merge PR without review
        if: github.event.inputs.force_merge == 'true'
        run: |
          gh pr merge $PULL_REQ_NUMBER -m --admin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  Test:
    needs: PromoteCode
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Test
        uses: ./.github/actions/test-cloudformation-templates
  DetermineEnv:
    needs: Test
    runs-on: ubuntu-latest
    if: github.event.inputs.target_branch == 'test' || github.event.inputs.target_branch == 'staging' || github.event.inputs.target_branch == 'main' || github.event.inputs.target_branch == 'master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Determine Environment
        id: determine-env
        uses: ./.github/actions/determine-deployment-env
        with:
          target_branch: ${{ github.event.inputs.target_branch }}
    outputs:
      target_environment_name: ${{ steps.determine-env.outputs.target_environment_name }}
  Deploy:
    needs: DetermineEnv
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy to Dev
        if: needs.DetermineEnv.outputs.target_environment_name == 'DEV'
        uses: ./.github/actions/deploy-cloudformation-templates
        with:
          account-number: ${{ secrets.DEV_ACCOUNT_NUMBER }}
      - name: Deploy to Test
        if: needs.DetermineEnv.outputs.target_environment_name == 'TEST'
        uses: ./.github/actions/deploy-cloudformation-templates
        with:
          account-number: ${{ secrets.TEST_ACCOUNT_NUMBER }}
      - name: Deploy to Staging
        if: needs.DetermineEnv.outputs.target_environment_name == 'STAGING'
        uses: ./.github/actions/deploy-cloudformation-templates
        with:
          account-number: ${{ secrets.STAGING_ACCOUNT_NUMBER }}
      - name: Deploy to Prod
        if: needs.DetermineEnv.outputs.target_environment_name == 'PROD'
        uses: ./.github/actions/deploy-cloudformation-templates
        with:
          account-number: ${{ secrets.PROD_ACCOUNT_NUMBER }}

